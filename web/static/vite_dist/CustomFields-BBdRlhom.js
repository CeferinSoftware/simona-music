import{_ as O}from"./DataTable-BhAO7RbG.js";import{_ as P}from"./ModalForm-D0z4l5nm.js";import{u as R}from"./useBaseEditModal-D4NDXa4y.js";import{g as N,u as U}from"./layout-CUzOT8aY.js";import{u as q,r as B}from"./regle-hGsoY2W9.js";import{_ as H}from"./FormGroupSelect-Cp69W3Gu.js";import{_ as F}from"./FormGroupField-K9S4Sadl.js";import{m as K}from"./mergeExisting-B6FvxI3v.js";import{d as M,g as S,r as L,K as Q,q as T,m as k,o as x,u as e,e as a,a as n,b as m,f as V,t as d,i as z}from"./vue-BsfewpWM.js";import{u as j,_ as G}from"./AddButton-DLx8r-7e.js";import{u as J}from"./useConfirmAndDelete-CuQodV6V.js";import{_ as W}from"./CardPage-Cth3uewv.js";import{g as D,a as X,Q as E}from"./useStationQuery-ClAZEJp_.js";import{u as Y}from"./useApiItemProvider-DAIhDonu.js";import{_ as Z}from"./Loading-CQdAiB8R.js";import"./icons-BAjd3tML.js";import"./FormMultiCheck-RiRcopXY.js";import"./map-Caxea7Kw.js";import"./estoolkit-DCzBkaPJ.js";import"./isArrayLike-DknTMkCU.js";import"./iteratee-DJRL6CbS.js";import"./FormCheckbox-Cc7beVle.js";import"./isTypedArray-By1PpNM0.js";import"./some-B0KiPFWm.js";import"./forEach-BFcv9GyE.js";import"./InvisibleSubmitButton-NGv_v7G8.js";import"./_plugin-vue_export-helper-DlAUqK2U.js";import"./useSlotsExcept-Dp0PSXNw.js";import"./useHasModal-Bq3QxExQ.js";import"./bootstrap.esm-30QIU_ZL.js";import"./leaflet-DkUWBo0d.js";import"./hlsjs-BVyhFw5s.js";import"./zxcvbn-Bgw4VUEj.js";import"./ValidationError-DsAp6Fjg.js";import"./FormGroup-DXDHSoyc.js";import"./InfoCard-D5Q671bF.js";import"./vue-router-Cafqdr3I.js";const ee={class:"row g-3"},te=M({__name:"EditModal",props:{createUrl:{},autoAssignTypes:{}},emits:["relist"],setup(w,{expose:y,emit:p}){const u=w,c=p,f=S("$modal"),s=L({name:"",short_name:"",auto_assign:""}),{r$:o}=q(s,{name:{required:B}},{}),{loading:_,error:g,isEditMode:b,clearContents:v,create:$,edit:h,doSubmit:r,close:l}=R(Q(u,"createUrl"),c,f,()=>{o.$reset({toOriginalState:!0})},i=>{o.$reset({toState:K(o.$value,i)})},async()=>{const{valid:i}=await o.$validate();return{valid:i,data:s.value}}),{$gettext:t}=N(),A=T(()=>{const i=[{text:t("Disable"),value:""}];for(const C in u.autoAssignTypes)i.push({text:u.autoAssignTypes[C],value:C});return i}),I=T(()=>b.value?t("Edit Custom Field"):t("Add Custom Field"));return y({create:$,edit:h,close:l}),(i,C)=>(x(),k(P,{ref_key:"$modal",ref:f,loading:e(_),title:I.value,error:e(g),"disable-save-button":e(o).$invalid,onSubmit:e(r),onHidden:e(v)},{default:a(()=>[n("div",ee,[m(F,{id:"edit_form_name",class:"col-md-6",field:e(o).name,label:e(t)("Field Name"),description:e(t)("This will be used as the label when editing individual songs, and will show in API results.")},null,8,["field","label","description"]),m(F,{id:"edit_form_short_name",class:"col-md-6",field:e(o).short_name,label:e(t)("Programmatic Name")},{description:a(()=>[V(d(e(t)('Optionally specify an API-friendly name, such as "field_name". Leave this field blank to automatically create one based on the name.')),1)]),_:1},8,["field","label"]),m(H,{id:"edit_form_auto_assign",class:"col-md-6",field:e(o).auto_assign,label:e(t)("Automatically Set from ID3v2 Value"),options:A.value,description:e(t)("Optionally select an ID3v2 metadata field that, if present, will be used to set this field's value.")},null,8,["field","label","options","description"])])]),_:1},8,["loading","title","error","disable-save-button","onSubmit","onHidden"]))}}),se={class:"card-text"},oe={class:"btn-group btn-group-sm"},ae=["onClick"],ie=["onClick"],Ke=M({__name:"CustomFields",setup(w){const y=D("/admin/vue/custom_fields"),p=D("/admin/custom_fields"),{axios:u}=U(),{data:c,isLoading:f}=X({queryKey:[E.AdminCustomFields,"props"],queryFn:async({signal:r})=>{const{data:l}=await u.get(y.value,{signal:r});return l}}),{$gettext:s}=N(),o=[{key:"name",isRowHeader:!0,label:s("Field Name"),sortable:!1},{key:"auto_assign",label:s("Auto-Assign Value"),sortable:!1,formatter:r=>c.value?.autoAssignTypes[r]??s("None")},{key:"actions",label:s("Actions"),sortable:!1,class:"shrink"}],_=Y(p,[E.AdminCustomFields,"data"]),g=()=>{_.refresh()},b=S("$editModal"),{doCreate:v,doEdit:$}=j(b),{doDelete:h}=J(s("Delete Custom Field?"),()=>g());return(r,l)=>(x(),k(Z,{loading:e(f),lazy:""},{default:a(()=>[m(W,{title:e(s)("Custom Fields")},{info:a(()=>[n("p",se,d(e(s)("Create custom fields to store extra metadata about each media file uploaded to your station libraries.")),1)]),actions:a(()=>[m(G,{text:e(s)("Add Custom Field"),onClick:e(v)},null,8,["text","onClick"])]),default:a(()=>[m(O,{id:"custom_fields",fields:o,"show-toolbar":!1,provider:e(_)},{"cell(name)":a(({item:t})=>[V(d(t.name)+" ",1),n("code",null,d(t.short_name),1)]),"cell(actions)":a(({item:t})=>[n("div",oe,[n("button",{type:"button",class:"btn btn-primary",onClick:A=>e($)(t.links.self)},d(e(s)("Edit")),9,ae),n("button",{type:"button",class:"btn btn-danger",onClick:A=>e(h)(t.links.self)},d(e(s)("Delete")),9,ie)])]),_:1},8,["provider"])]),_:1},8,["title"]),e(c)?(x(),k(te,{key:0,ref_key:"$editModal",ref:b,"create-url":e(p),"auto-assign-types":e(c).autoAssignTypes,onRelist:l[0]||(l[0]=()=>g())},null,8,["create-url","auto-assign-types"])):z("",!0)]),_:1},8,["loading"]))}});export{Ke as default};
